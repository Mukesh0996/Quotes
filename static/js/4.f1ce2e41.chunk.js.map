{"version":3,"sources":["components/quotes/NoQuotesFound.js","components/quotes/NoQuotesFound.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["NoQuotesFound","className","classes","noquotes","to","module","exports","NewCommentForm","props","onAddedComment","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","params","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","url"],"mappings":"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","file":"static/js/4.f1ce2e41.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\nimport classes from './NoQuotesFound.module.css';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className='btn' to=\"/add-quote\">\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3DIYb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import { useEffect, useRef } from 'react';\nimport useHttp from '../../Hooks/httpHook';\nimport { addComment } from '../../lib';\nimport classes from './NewCommentForm.module.css';\nimport LoadingSpinner from '../UI/LoadingSpinner'\nconst NewCommentForm = (props) => {\n  const {onAddedComment} = props;\n  const commentTextRef = useRef();\n\n  \n  const {sendRequest, status, error}= useHttp(addComment);\n\n useEffect(()=> {\n   if(status === \"completed\" && !error) {\n    onAddedComment();\n   }\n },[status, error, onAddedComment])\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value;\n    sendRequest({ commentData : {text:enteredText}, quoteId: props.quoteId})\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && <div className=\"centered\"><LoadingSpinner/></div>}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport useHttp from '../../Hooks/httpHook';\nimport { getComments } from '../../lib';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport CommentsList from '../comments/CommentsList';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const {quoteId} = params;\n  const { sendRequest , status, data: loadedComments} = useHttp(getComments);\n\n\n  //for page reload when we add a new comment\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  },[quoteId, sendRequest])\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  },[sendRequest, quoteId])\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  let comments;\n\n  if(status ===\"pending\") {\n    comments = <div className=\"centered\"> <LoadingSpinner/> </div>\n  }\n  if(status === \"completed\" && loadedComments) {\n    comments = <CommentsList comments={loadedComments}/>\n  }\n\n  if(status === \"completed\" && (!loadedComments || loadedComments.length === 0) ) {\n    comments = <p className=\"centered\">No comments are added yet..</p>\n  }\n\n\n  \n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm  quoteId={quoteId} onAddedComment={addedCommentHandler}/>}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Fragment, useEffect } from 'react';\nimport { useParams, Route, Link, useRouteMatch } from 'react-router-dom';\nimport Comments from '../components/comments/Comments';\nimport NoQuotesFound from '../components/quotes/NoQuotesFound';\nimport HighLightedQuote from '../components/quotes/HighlightedQuote';\nimport useHttp from '../Hooks/httpHook';\nimport { getSingleQuote } from '../lib';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\n\n\nconst QuoteDetail = () => {\n    const params = useParams();\n    const match = useRouteMatch();  \n    const {quoteId} = params;\n    const { sendRequest, status, data: loadedQuote } = useHttp(getSingleQuote)\n    \n    useEffect(() => {\n        sendRequest(quoteId);\n    },[sendRequest, quoteId])\n    \n    const quote = loadedQuote;\n    if(status ===\"pending\") {\n        return <div className=\"centered\"> <LoadingSpinner/> </div>\n    }\n\n    if(!loadedQuote) {\n        return <NoQuotesFound/>\n    }\n\n    return <Fragment>\n                <HighLightedQuote text={quote.text} author={quote.author} />\n                <Route path={match.path} exact>\n                    <div className=\"centered\">\n                        <Link className=\"btn--flat\" to={`${match.url}/comments`}>Load Comments</Link>\n                    </div>\n                </Route>\n                <Route path={`${match.path}/comments`}>\n                    <Comments/>\n                </Route> \n           </Fragment>\n}\n\nexport default QuoteDetail;"],"sourceRoot":""}